// Code generated by MockGen. DO NOT EDIT.
// Source: uploader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uploader "github.com/schepelin/imgupload/pkg/uploader"
)

// MockUploadService is a mock of UploadService interface
type MockUploadService struct {
	ctrl     *gomock.Controller
	recorder *MockUploadServiceMockRecorder
}

// MockUploadServiceMockRecorder is the mock recorder for MockUploadService
type MockUploadServiceMockRecorder struct {
	mock *MockUploadService
}

// NewMockUploadService creates a new mock instance
func NewMockUploadService(ctrl *gomock.Controller) *MockUploadService {
	mock := &MockUploadService{ctrl: ctrl}
	mock.recorder = &MockUploadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUploadService) EXPECT() *MockUploadServiceMockRecorder {
	return m.recorder
}

// UploadImage mocks base method
func (m *MockUploadService) UploadImage(ctx context.Context, raw []byte) (string, error) {
	ret := m.ctrl.Call(m, "UploadImage", ctx, raw)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage
func (mr *MockUploadServiceMockRecorder) UploadImage(ctx, raw interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockUploadService)(nil).UploadImage), ctx, raw)
}

// GetImage mocks base method
func (m *MockUploadService) GetImage(ctx context.Context, imgID string) (*uploader.Image, error) {
	ret := m.ctrl.Call(m, "GetImage", ctx, imgID)
	ret0, _ := ret[0].(*uploader.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage
func (mr *MockUploadServiceMockRecorder) GetImage(ctx, imgID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockUploadService)(nil).GetImage), ctx, imgID)
}

// MockHasher is a mock of Hasher interface
type MockHasher struct {
	ctrl     *gomock.Controller
	recorder *MockHasherMockRecorder
}

// MockHasherMockRecorder is the mock recorder for MockHasher
type MockHasherMockRecorder struct {
	mock *MockHasher
}

// NewMockHasher creates a new mock instance
func NewMockHasher(ctrl *gomock.Controller) *MockHasher {
	mock := &MockHasher{ctrl: ctrl}
	mock.recorder = &MockHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHasher) EXPECT() *MockHasherMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockHasher) Generate(arg0 []byte) string {
	ret := m.ctrl.Call(m, "Generate", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate
func (mr *MockHasherMockRecorder) Generate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockHasher)(nil).Generate), arg0)
}

// MockURLShortener is a mock of URLShortener interface
type MockURLShortener struct {
	ctrl     *gomock.Controller
	recorder *MockURLShortenerMockRecorder
}

// MockURLShortenerMockRecorder is the mock recorder for MockURLShortener
type MockURLShortenerMockRecorder struct {
	mock *MockURLShortener
}

// NewMockURLShortener creates a new mock instance
func NewMockURLShortener(ctrl *gomock.Controller) *MockURLShortener {
	mock := &MockURLShortener{ctrl: ctrl}
	mock.recorder = &MockURLShortenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockURLShortener) EXPECT() *MockURLShortenerMockRecorder {
	return m.recorder
}

// MakeShortURL mocks base method
func (m *MockURLShortener) MakeShortURL(imgID string) string {
	ret := m.ctrl.Call(m, "MakeShortURL", imgID)
	ret0, _ := ret[0].(string)
	return ret0
}

// MakeShortURL indicates an expected call of MakeShortURL
func (mr *MockURLShortenerMockRecorder) MakeShortURL(imgID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeShortURL", reflect.TypeOf((*MockURLShortener)(nil).MakeShortURL), imgID)
}
